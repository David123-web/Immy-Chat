import { PAGE_SIZE, TAILWIND_CLASS } from '@/constants';
import { RouterConstants } from '@/constants/router';
import { useMutation } from '@/hooks/useMutation';
import { useQuery } from '@/hooks/useQuery';
import { IAddBlogForm } from '@/src/interfaces/blogManagement/blogManagement.interface';
import {
	IAddFAQForm,
	IAddFAQRequest,
	IGetFAQByIdResponse,
	IGetFAQCategoriesResponse,
	IUpdateFAQRequest,
} from '@/src/interfaces/faqManagement/faqManagement.interface';
import { createFAQ, getFAQById, getFAQCategories, updateFAQById } from '@/src/services/faqManagement/apiFAQManagement';
import { LeftOutlined } from '@ant-design/icons';
import { Button, Col, Form, Input, Row, Select, Space, Spin } from 'antd';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { toast } from 'react-toastify';
import CustomCKEditor from '../PaymentGateways/CustomCKEditor';
import DashboardRoute from '../routes/DashboardRoute';
import Head from 'next/head';
import { useTranslation } from 'next-i18next';

type FormAddUpdateFAQProps = {
	isUpdate?: boolean;
};

const FormAddUpdateFAQ = (props: FormAddUpdateFAQProps) => {
	const { t } = useTranslation()
	const { isUpdate = false } = props;
	const router = useRouter();
	const [formAddFAQ] = Form.useForm<IAddFAQForm>();
	const [currentPage, setCurrentPage] = useState(1);

	/* ------------------------------- SUBMIT FORM ------------------------------ */
	const onFinish = (value) => {
		if (router.query.id) {
			onUpdateFAQ();
		} else {
			onCreateFAQ();
		}
	};

	/* ----------------------- GET LIST OF FAQ CATEGORIES ----------------------- */
	const [listOfFAQCategories, setListOfFAQCategories] = useState<IGetFAQCategoriesResponse>({
		total: 0,
		data: [],
	});
	const getListOfFAQCategoriesQuery = useQuery<any>(
		['IGetFAQCategoriesResponse'],
		() =>
			getFAQCategories({
				take: PAGE_SIZE,
				skip: PAGE_SIZE * (currentPage - 1),
			}),
		{
			onSuccess: (res) => {
				setListOfFAQCategories({ total: 100, data: res.data.filter((x) => !x.isDeleted) });
			},
			onError: (err) => {
				toast.error(err.data?.message);
			},
		}
	);

	const onLoadingFAQCategory = (event: any) => {
		const target = event.target;
		if (
			target.scrollTop + target.offsetHeight === target.scrollHeight &&
			listOfFAQCategories.total > listOfFAQCategories.data.length
		) {
			getListOfFAQCategoriesQuery.refetch();
		}
	};

	/* ------------------------------- CREAT BLOG ------------------------------- */
	const createFAQMutation = useMutation<any, IAddFAQRequest>(createFAQ, {
		onSuccess: (res) => {
			toast.success(t('dashboard.notification.create_faq_success'));
			formAddFAQ.resetFields();
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	const onCreateFAQ = () => {
		const formData = formAddFAQ.getFieldsValue();
		const createFAQRequest: IAddFAQRequest = {
			...formData,
		};
		createFAQMutation.mutate(createFAQRequest);
	};
	/* ------------------------------ GET FAQ BY ID ----------------------------- */
	const [faqData, setFAQData] = useState<IGetFAQByIdResponse>();
	const getFAQDataQuery = useQuery<IGetFAQByIdResponse>(
		['IGetFAQByIdResponse'],
		() => getFAQById(router.query.id as string),
		{
			enabled: !!router.query.id,
			onSuccess: (res) => {
				setFAQData(res.data);
				formAddFAQ.setFieldsValue({
					question: res.data.question,
					answer: res.data.answer,
					categoryId: res.data.categoryId,
				});
			},
			onError: (err) => {
				router.push(RouterConstants.NOT_FOUND.path);
			},
		}
	);
	/* ------------------------------- UPDATE FAQ ------------------------------- */
	const updateFAQMutation = useMutation<any, { id: string; body: IUpdateFAQRequest }>(updateFAQById, {
		onSuccess: (res) => {
			toast.success(t('dashboard.notification.update_faq_success'));
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	const onUpdateFAQ = () => {
		const formData = formAddFAQ.getFieldsValue();
		const updateFAQRequest: IUpdateFAQRequest = {
			question: formData.question,
			answer: formData.answer,
			categoryId: formData.categoryId,
		};
		updateFAQMutation.mutate({ id: router.query.id as string, body: updateFAQRequest });
	};

	return (
		<DashboardRoute>
			<Head>
				<title>{isUpdate ? t('dashboard.button.update') : t('dashboard.button.add')} FAQ</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div
				onClick={() => router.push(RouterConstants.DASHBOARD_FAQ_MANAGEMENT_FAQS.path)}
				className="tw-cursor-pointer tw-flex tw-justify-start tw-items-center tw-font-bold tw-text-xl"
			>
				<LeftOutlined className="tw-mr-4" />
				{isUpdate ? t('dashboard.button.update') : t('dashboard.button.add')} FAQ
			</div>
			<div>
				<Form className="tw-w-full tw-m-auto tw-mt-6" onFinish={onFinish} form={formAddFAQ} layout="vertical">
					<Row gutter={[24, 24]}>
						<Col span={16}>
							<Form.Item
								name="question"
								label={t('dashboard.option.question')}
								rules={[
									{
										required: true,
									},
								]}
							>
								<Input placeholder={t('dashboard.placeholder.enter_question')} />
							</Form.Item>
						</Col>
						<Col span={8}>
							<Form.Item
								name="categoryId"
								label={t('dashboard.option.category')}
								rules={[
									{
										required: true,
									},
								]}
							>
								<Select
									showSearch
									placeholder={t('dashboard.placeholder.select_category')}
									filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())}
									dropdownRender={(menu) => (
										<>
											{menu}
											{getListOfFAQCategoriesQuery.isFetching || getListOfFAQCategoriesQuery.isRefetching ? (
												<Space style={{ padding: '0 4px', justifyContent: 'center', width: '100%' }}>
													<Spin size="default" />
												</Space>
											) : null}
										</>
									)}
									options={listOfFAQCategories.data.map((la) => ({
										value: la.id,
										label: la.name,
									}))}
									onPopupScroll={onLoadingFAQCategory}
								/>
							</Form.Item>
						</Col>
					</Row>

					<Row gutter={[24, 24]}>
						<Col span={24}>
							<Form.Item
								name="answer"
								label={t('dashboard.option.answer')}
								rules={[
									{
										required: true,
									},
								]}
							>
								<CustomCKEditor initialContent={faqData?.answer} form={formAddFAQ} name="answer" />
							</Form.Item>
						</Col>
					</Row>

					<Form.Item>
						<Button htmlType="submit" className={`${TAILWIND_CLASS.BUTTON_ANTD} tw-px-12`}>
							{t('dashboard.button.save')}
						</Button>
					</Form.Item>
				</Form>
			</div>
		</DashboardRoute>
	);
};

export default FormAddUpdateFAQ;
