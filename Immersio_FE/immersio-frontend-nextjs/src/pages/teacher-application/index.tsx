import AboutForm from '@/components/TeacherApplication/AboutForm';
import ProfileForm from '@/components/TeacherApplication/ProfileForm';
import QualificationsForm from '@/components/TeacherApplication/QualificationsForm';
import { TAILWIND_CLASS } from '@/constants';
import { RouterConstants } from '@/constants/router';
import { jwtValidate } from '@/src/helpers/auth';
import { IPostProfileTeacher } from '@/src/interfaces/user/user.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { useMobXStores } from '@/src/stores';
import { QuestionOutlined } from '@ant-design/icons';
import { Button, Form, StepProps, Steps, Tooltip } from 'antd';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import DefaultLayout from '../../layouts';

const TeacherApplication = () => {
	const { authStore, userStore } = useMobXStores();

	const [currentStep, setCurrentStep] = useState(-1);
	const [storageData, setStorageData] = useState<IPostProfileTeacher & {dialCode: string}>();
	const [stepSelected, setStepSelected] = useState(0);
	const [loading, setLoading] = useState(false);
	const router = useRouter();
	const [aboutForm] = Form.useForm();
	const [qualificationForm] = Form.useForm();
	const [profileForm] = Form.useForm();

	useEffect(() => {
		if (jwtValidate()) {
			if (userStore.currentUser?.roleProfile?.id) {
				router.push(RouterConstants.DASHBOARD.path);
			}
		} else if (!authStore.instructorRegisterData?.email) {
			router.push(RouterConstants.LOGIN.path);
		}

		return () => {
			authStore.setInstructorRegisterData(null);
		};
	}, [JSON.stringify(userStore.currentUser)]);

	const listStep: StepProps[] = [
		{
			status: `${currentStep >= 0 ? 'process' : 'wait'}`,
			title: <span className="tw-font-semibold tw-text-lg">About</span>,
		},
		{
			status: `${currentStep >= 1 ? 'process' : 'wait'}`,
			title: <span className="tw-font-semibold tw-text-lg">Qualifications</span>,
		},
		{
			status: `${currentStep >= 2 ? 'process' : 'wait'}`,
			title: <span className="tw-font-semibold tw-text-lg">Profile</span>,
		},
	];

	const switchFormIdForSubmit = () => {
		switch (currentStep) {
			case 0:
				return aboutForm.submit();
			case 1:
				return qualificationForm.submit();
			case 2:
				return profileForm.submit();
		}
	};

	return (
		<>
			<Head>
				<title>Become an instructor</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<DefaultLayout>
				<div className="teacher__application tw-h-auto tw-mb-24 tw-mt-16 lg:tw-container lg:tw-mx-auto">
					{currentStep >= 0 ? (
						<div className="lg:tw-max-w-3xl lg:tw-mx-auto">
							<Steps
								type="navigation"
								current={currentStep}
								onChange={(stepSelected) => {
									if (!loading) {
										if (stepSelected > currentStep) {
											switchFormIdForSubmit();
										} else {
											setCurrentStep(stepSelected);
										}
									}
								}}
								className="site-navigation-steps"
								items={listStep}
							/>
							<div className="tw-px-4 lg:tw-px-0 lg:tw-mt-4 ">
								<div className="lg:tw-text-xl color-theme-1 tw-mb-4 tw-relative tw-w-fit">
									{listStep[currentStep].title}
									{currentStep > 0 && (
										<span className="tw-absolute -tw-top-2 -tw-right-8">
											<Tooltip
												color="#005F56"
												placement="topLeft"
												title="These questions are to ensure that you are a good fit for this language instructor platform."
											>
												<Button
													size="small"
													className={TAILWIND_CLASS.BUTTON_ANTD}
													shape="circle"
													icon={<QuestionOutlined className="color-theme-7 !tw-text-[0.72rem]" />}
												/>
											</Tooltip>
										</span>
									)}
								</div>

								<div className={currentStep === 0 ? 'tw-block' : 'tw-hidden'}>
									<AboutForm
										setStorageData={setStorageData}
										formInstance={aboutForm}
										setCurrentStep={setCurrentStep}
										stepSelected={stepSelected}
										setStepSelected={setStepSelected}
									/>
								</div>
								<div className={currentStep === 1 ? 'tw-block' : 'tw-hidden'}>
									<QualificationsForm
										setStorageData={setStorageData}
										formInstance={qualificationForm}
										stepSelected={stepSelected}
										setCurrentStep={setCurrentStep}
										setStepSelected={setStepSelected}
									/>
								</div>
								<div className={currentStep === 2 ? 'tw-block' : 'tw-hidden'}>
									<ProfileForm
										setStorageData={setStorageData}
										storageData={storageData}
										setLoading={setLoading}
										formInstance={profileForm}
										stepSelected={stepSelected}
										setCurrentStep={setCurrentStep}
										setStepSelected={setStepSelected}
									/>
								</div>
							</div>
							<div className={`tw-w-full tw-flex tw-justify-start tw-items-center tw-mt-6 tw-gap-4 tw-px-4 lg:tw-px-0`}>
								{currentStep > 0 && (
									<Button
										className="!tw-px-6 !tw-rounded-md color-theme-1 color-theme-6"
										size="large"
										type="default"
										onClick={() => {
											setCurrentStep((prev) => {
												if (prev === 0) {
													return 0;
												}
												return prev - 1;
											});
											setStepSelected((prev) => {
												if (prev === 0) {
													return 0;
												}
												return prev - 1;
											});
										}}
										disabled={loading}
									>
										Back
									</Button>
								)}
								<Button
									className={`${TAILWIND_CLASS.BUTTON_ANTD} !tw-px-6 !tw-rounded-md`}
									size="large"
									htmlType="submit"
									onClick={() => {
										switchFormIdForSubmit();
									}}
									disabled={loading}
									loading={loading}
								>
									{currentStep === 2 ? 'Complete registration' : 'Next'}
								</Button>
							</div>
						</div>
					) : (
						<div className="tw-h-[56vh] tw-font-medium tw-mt-32 lg:tw-max-w-5xl lg:tw-mx-auto tw-text-center tw-flex tw-flex-col tw-justify-center tw-items-center tw-gap-y-4">
							{/* <IntroductionTeacherRegister /> */}
							<div>Thank you for registering with us.</div>
							<div>
								Please answer the following questions as succinctly as possible, and we will contact you shortly to
								follow up with next steps.
							</div>
							<Button
								className={`${TAILWIND_CLASS.BUTTON_ANTD} !tw-px-6 !tw-rounded-md`}
								size="large"
								onClick={() => setCurrentStep(0)}
							>
								Next
							</Button>
						</div>
					)}
				</div>
			</DefaultLayout>
		</>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default TeacherApplication;
