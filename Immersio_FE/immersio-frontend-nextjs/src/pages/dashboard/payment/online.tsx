import ActivationButtons from '@/components/PaymentGateways/ActivationButtons';
import BoxPaymentOnline from '@/components/PaymentGateways/BoxPaymentOnline';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { useMutation } from '@/hooks/useMutation';
import { useQuery } from '@/hooks/useQuery';
import { GatewayType, IOnlineGateway, IUpdateOnlinePaymentGateways } from '@/src/interfaces/paymentGateways/paymentGateways.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { getOnlinePaymentGateways, updateOnlinePaymentGateways } from '@/src/services/paymentGateway/apiPaymentGateway';
import { Form, Input } from 'antd';
import Head from 'next/head';
import { useState } from 'react';
import { useTranslation } from 'next-i18next';
import { toast } from 'react-toastify';

const EMPTY_GATEWAY: IOnlineGateway = {
	id: '',
	type: GatewayType.OTHER,
	subdomainId: '',
	clientId: '',
	secretKey: '',
	isActivated: false,
	updatedAt: ''
}

const PaymentOnline = () => {
	const { t } = useTranslation()
	const [paypalInstance] = Form.useForm();
	const [stripeInstance] = Form.useForm();
	const [VNPayInstance] = Form.useForm();
	const [isActivatePaypal, setIsActivatePaypal] = useState(false);
	const [isActivateStripe, setIsActivateStripe] = useState(false);
	const [isActivateVNPay, setIsActivateVNPay] = useState(false);

	const onFinish = (data: any) => {
		console.log('data', data);
		const updateOnlinePaymentGatewayRequest: IUpdateOnlinePaymentGateways = {
			type: data.paymentType,
			clientId: data.clientId,
			secretKey: data.secretKey,
			isActivated: data.isActivated,
			subdomainId: 'cldw3p0dy000ds6c07xpgaxps', // TODO
		};
		updateOnlinePaymentGatewayMutation.mutate(updateOnlinePaymentGatewayRequest);
	};
	const getOnlinePaymentGatewaysQuery = useQuery('GET_ONLINE_PAYMENT_GATEWAYS', () => getOnlinePaymentGateways(), {
		onSuccess: (res) => {
			res.data.map((gateway: IOnlineGateway) => {
				switch (gateway.type) {
					case GatewayType.PAYPAL:
						paypalInstance.setFieldsValue(gateway)
						setIsActivatePaypal(gateway.isActivated)
						break;
					case GatewayType.STRIPE:
						stripeInstance.setFieldsValue(gateway)
						setIsActivateStripe(gateway.isActivated)
						break;
					default:
						break;
				}
			})
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	const updateOnlinePaymentGatewayMutation = useMutation(updateOnlinePaymentGateways, {
		onSuccess: (res) => {
			getOnlinePaymentGatewaysQuery.refetch();
			toast.success(t('dashboard.notification.update_gateway_success'));
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	return (
		<>
			<Head>
				<title>Payment Online</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<DashboardRoute>
				<div id="payment-gateways" className="tw-flex tw-gap-x-4 tw-justify-between">
					<BoxPaymentOnline formId="paypal" title="Paypal">
						<Form id="paypal" layout="vertical" onFinish={onFinish} form={paypalInstance}>
							<Form.Item className="tw-hidden" name="paymentType" initialValue={'PAYPAL'} />
							<Form.Item name="isActivated" label="Paypal" >
								<ActivationButtons
									formInstance={paypalInstance}
									name="isActivated"
									isActivate={isActivatePaypal}
									onClick={() => setIsActivatePaypal(!isActivatePaypal)}
								/>
							</Form.Item>
							<Form.Item name="clientId" label={t('dashboard.option.client_ID')}>
								<Input />
							</Form.Item>
							<Form.Item name="secretKey" label={t('dashboard.option.secret_key')}>
								<Input />
							</Form.Item>
						</Form>
					</BoxPaymentOnline>
					<BoxPaymentOnline formId="stripe" title="Stripe">
						<Form id="stripe" layout="vertical" onFinish={onFinish} form={stripeInstance}>
							<Form.Item className="tw-hidden" name="paymentType" initialValue={'STRIPE'} />
							<Form.Item name="isActivated" label="Stripe">
								<ActivationButtons
									formInstance={stripeInstance}
									name="isActivated"
									isActivate={isActivateStripe}
									onClick={() => setIsActivateStripe(!isActivateStripe)}
								/>
							</Form.Item>
							<Form.Item name="clientId" label={t('dashboard.option.client_ID')}>
								<Input />
							</Form.Item>
							<Form.Item name="secretKey" label={t('dashboard.option.secret_key')}>
								<Input />
							</Form.Item>
						</Form>
					</BoxPaymentOnline>
					<BoxPaymentOnline formId="VNPay" title="VN-Pay">
						<Form id="VNPay" layout="vertical" onFinish={onFinish} form={VNPayInstance}>
							<Form.Item className="tw-hidden" name="paymentType" initialValue={'VNPay'} />
							<Form.Item name="enable" label="VNPay">
								<ActivationButtons
									formInstance={VNPayInstance}
									name="enable"
									isActivate={isActivateVNPay}
									onClick={() => setIsActivateVNPay(!isActivateVNPay)}
								/>
							</Form.Item>
							<Form.Item name="clientId" label={t('dashboard.option.client_ID')}>
								<Input />
							</Form.Item>
							<Form.Item name="secretKey" label={t('dashboard.option.secret_key')}>
								<Input />
							</Form.Item>
						</Form>
					</BoxPaymentOnline>
				</div>
			</DashboardRoute>
		</>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default PaymentOnline;
