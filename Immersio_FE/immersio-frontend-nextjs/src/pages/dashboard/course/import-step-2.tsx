import ImportCsvReportModal from '@/components/People/ImportCsvReportModal';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { RouterConstants } from '@/constants/router';
import { useMutation } from '@/hooks/useMutation';
import { Option } from '@/src/interfaces/common/common.interface';
import { ImportStep2Request } from '@/src/interfaces/course/course.interface';
import { ImportInstructorsRequest, ReportItem } from '@/src/interfaces/people/people.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { importCourseStep2 } from '@/src/services/courses/apiCourses';
import { LeftOutlined } from '@ant-design/icons';
import { Button, Form, Input } from 'antd';
import { useForm } from 'antd/lib/form/Form';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useRef, useState } from 'react';
import { toast } from 'react-toastify';

const ImportCourseStep2ByCSV = () => {
	const router = useRouter();
	const [formSubmitCsv] = useForm<ImportInstructorsRequest>();
	const [file, setFile] = useState(null);
	const [headers, setHeaders] = useState<Option<string>[]>([]);
	const [isOpenReportModal, setIsOpenReportModal] = useState<boolean>(false);
	const importItems = useRef<ReportItem[]>([]);

	const handleFileRead = (event) => {
		const csvData = event.target.result;
		const lines = csvData.split('\n');
		if (lines.length > 0) {
			const headerRow = lines[0];
			const extractedHeaders: string[] = headerRow.split(',');
			setHeaders(extractedHeaders.map((header) => ({ label: header, value: header })));
		}
	};

	const handleFileChange = (event) => {
		const selectedFile = event.target.files[0];
		setFile(selectedFile);
		if (selectedFile) {
			const reader = new FileReader();
			reader.onload = handleFileRead;
			reader.readAsText(selectedFile);
		}
	};

	/* --------------------------------- IMPORT --------------------------------- */
	const importMutation = useMutation<any, ImportStep2Request>(importCourseStep2, {
		onSuccess: (res) => {
			const errorItems = res.data.sections.filter((item) => item.success === false);
			if (errorItems.length === 0) {
				toast.success('Upload successfully!');
			} else {
				importItems.current = errorItems.map((x) => ({ name: x.course_section, errors: [x.error] }));
				setIsOpenReportModal(true);
			}
			formSubmitCsv.resetFields();
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});
	function onFinish(values: ImportStep2Request) {
		const formData = new FormData();
		formData.append('file', file);
		formData.append('courseId', router.query.courseId as string);
		importMutation.mutate({
			data: formData,
		});
	}

	return (
		<DashboardRoute>
			<Head>
				<title>Import Step 2</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div>
				<div
					onClick={() => router.push(RouterConstants.DASHBOARD_COURSE_LESSON_DIALOGUE.path)}
					className="tw-cursor-pointer tw-flex tw-justify-start tw-items-center tw-text-lg"
				>
					<LeftOutlined className="tw-mr-4" />
					Back
				</div>
				<div className="tw-flex tw-flex-col tw-gap-6 tw-mt-6">
					<div className="tw-text-2xl tw-font-semibold">{'Import csv file'}</div>
					<Form id="csv" layout="vertical" onFinish={onFinish}>
						<Form.Item
							className=""
							name={'file'}
							rules={[
								{
									required: true,
									message: 'Please choose file',
								},
							]}
						>
							<Input type="file" accept=".csv" onChange={handleFileChange} className="tw-border-none tw-pl-0" />
						</Form.Item>
						<Button disabled={file === null} form="csv" type="primary" htmlType="submit" className="tw-w-fit">
							Import
						</Button>
					</Form>
				</div>
				<ImportCsvReportModal
					reportItems={importItems.current}
					isOpen={isOpenReportModal}
					setIsOpen={setIsOpenReportModal}
				/>
			</div>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default ImportCourseStep2ByCSV;
