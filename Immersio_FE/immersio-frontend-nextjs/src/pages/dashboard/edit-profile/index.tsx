import DashboardRoute from '@/components/routes/DashboardRoute';
import { TAILWIND_CLASS } from '@/constants';
import { useMutation } from '@/hooks/useMutation';
import { ROLE_TYPE } from '@/src/interfaces/auth/auth.interface';
import { ISocialLinks } from '@/src/interfaces/people/people.interface';
import { IUpdateUserProfileForm, IUploadAvatarResponse, USER_GENDER } from '@/src/interfaces/user/user.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { updateUserProfile, uploadAvatar } from '@/src/services/user/apiUser';
import { useMobXStores } from '@/src/stores';
import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';
import { Button, Col, DatePicker, Form, Input, Modal, Row, Select, Spin, Upload, message } from 'antd';
import TextArea from 'antd/lib/input/TextArea';
import { RcFile, UploadChangeParam, UploadFile, UploadProps } from 'antd/lib/upload';
import moment from 'moment';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { useTranslation } from 'next-i18next';
import { toast } from 'react-toastify';

const genderList = [
	{
		value: USER_GENDER.MALE,
		lable: 'MALE',
	},
	{
		value: USER_GENDER.FEMALE,
		lable: 'FEMALE',
	},
	{
		value: USER_GENDER.OTHER,
		lable: 'OTHER',
	},
];

const EditProfile = () => {
	const { t } = useTranslation()
	const [formUpdateUserProfile] = Form.useForm<IUpdateUserProfileForm>();
	const [formUpdateSocialUser] = Form.useForm<ISocialLinks>();
	const { globalStore, userStore } = useMobXStores();
	const [isOpenModalSocial, setIsOpenModalSocial] = useState<boolean>(false);
	/* ------------------------------ UPLOAD AVATAR ----------------------------- */
	const [loadingUploadImg, setLoadingUploadImg] = useState(false);
	const [imageUrlPreview, setImageUrlPreview] = useState<string>();
	const [avatarUrl, setAvatarUrl] = useState<string>();

	const getBase64 = (img: RcFile, callback: (url: string) => void) => {
		const reader = new FileReader();
		reader.addEventListener('load', () => callback(reader.result as string));
		reader.readAsDataURL(img);
	};

	const beforeUpload = (file: RcFile) => {
		const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/jpg';
		if (!isJpgOrPng) {
			message.error(t('dashboard.notification.you_can_only_upload_jpg_png'));
		}
		const isLt20M = file.size / 1024 / 1024 < 20;
		if (!isLt20M) {
			message.error(t('dashboard.notification.image_must_smaller_20MB'));
		}
		return isJpgOrPng && isLt20M;
	};

	const uploadFileMutation = useMutation<IUploadAvatarResponse, any>(uploadAvatar, {
		onSuccess: (res) => {
			setAvatarUrl(res.data.avatarUrl);
		},
		onError: (err) => {
			setImageUrlPreview(undefined);
			toast.error(err.data?.message);
		},
		onSettled: () => {
			setLoadingUploadImg(false);
		},
	});

	const handleChange: UploadProps['onChange'] = (info: UploadChangeParam<UploadFile>) => {
		if (info.file.status === 'uploading') {
			return;
		}
		const reader = new FileReader();
		reader.readAsDataURL(info.file.originFileObj);
		getBase64(info.file.originFileObj as RcFile, (url) => {
			setImageUrlPreview(url);
		});

		const formData = new FormData();
		formData.append('file', info.file.originFileObj as any);
		uploadFileMutation.mutate(formData);
		setLoadingUploadImg(true);
	};

	const uploadButton = (
		<div>
			{loadingUploadImg ? <LoadingOutlined /> : <PlusOutlined />}
			<div style={{ marginTop: 8 }}>
				{t('dashboard.button.upload')}
			</div>
		</div>
	);

	/* ------------------------------- UPDATE USER ------------------------------ */
	const updateProfileMutation = useMutation<any, IUpdateUserProfileForm>(updateUserProfile, {
		onSuccess: () => {
			toast.success(t('dashboard.notification.update_user_success'));
		},
		onError: (err) => {
			toast.error(err.data?.message || t('dashboard.notification.update_user_error'));
		},
	});

	const onFinishUpdateProfile = (data: IUpdateUserProfileForm) => {
		updateProfileMutation.mutate({
			...data,
			avatarUrl: avatarUrl,
		});
	};

	const onFinishUpdateSocial = (data: ISocialLinks) => {
		formUpdateUserProfile.setFieldValue('socialLinks', data);
		setIsOpenModalSocial(false);
	};

	useEffect(() => {
		setAvatarUrl(userStore.currentUser?.profile.avatarUrl);
		setImageUrlPreview(userStore.currentUser?.profile.avatarUrl);
	}, [userStore.currentUser]);

	return (
		<>
			<Head>
				<title>Edit profile</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<DashboardRoute>
				{!!userStore.currentUser && (
					<div>
						<Form id="user" onFinish={onFinishUpdateProfile} form={formUpdateUserProfile} layout="vertical">
							<Form.Item
								initialValue={userStore.currentUser?.profile.avatarUrl}
								name="avatarUrl"
								label={t('dashboard.label.avatar')}
								rules={[
									{
										required: true,
									},
								]}
							>
								<Upload
									name="avatar"
									listType="picture-card"
									className="avatar-uploader"
									showUploadList={false}
									beforeUpload={beforeUpload}
									onChange={handleChange}
									disabled={updateProfileMutation.isLoading || uploadFileMutation.isLoading}
								>
									{imageUrlPreview ? (
										<div className="tw-w-full tw-h-full tw-relative">
											<img src={imageUrlPreview} alt="avatar" className="tw-w-full tw-h-full tw-object-contain" />
											{uploadFileMutation.isLoading && (
												<div className="tw-w-full tw-h-full tw-absolute tw-top-0 tw-left-0 bg-theme-7 tw-opacity-50 tw-flex tw-justify-center tw-items-center">
													<Spin />
												</div>
											)}
										</div>
									) : (
										uploadButton
									)}
								</Upload>
							</Form.Item>
							<Row gutter={[24, 24]}>
								<Col span={12}>
									<Form.Item
										initialValue={userStore.currentUser?.profile.firstName}
										name="firstName"
										label={t('dashboard.label.first_name')}
										rules={[
											{
												required: true,
											},
										]}
									>
										<Input placeholder={t('dashboard.placeholder.enter_first_name')} />
									</Form.Item>
									<Form.Item
										initialValue={userStore.currentUser?.profile.phoneNumber}
										name="phoneNumber"
										label={t('dashboard.label.phone_number')}
										rules={[
											{
												required: true,
												message: t('dashboard.notification.phone_number_required'),
											},
											{
												pattern: /^[0-9]*$/,
												message: t('dashboard.notification.phone_number_is_not_valid'),
											},
											{
												max: 12,
												message: t('dashboard.notification.phone_number_is_not_valid'),
											},
										]}
									>
										<Input placeholder={t('dashboard.placeholder.enter_phone_number')} />
									</Form.Item>
									<Form.Item initialValue={userStore.currentUser?.profile.gender} name="gender" label={t('dashboard.label.gender')}>
										<Select
											showSearch
											defaultValue={userStore.currentUser?.profile.gender}
											placeholder={t('dashboard.placeholder.select_your_gender')}
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											options={genderList.map((gender) => ({
												value: gender.value,
												label: gender.lable,
											}))}
										/>
									</Form.Item>
									{(userStore.currentUser?.role == ROLE_TYPE.INSTRUCTOR ||
										userStore.currentUser?.role == ROLE_TYPE.TUTOR) && (
										<Form.Item
											initialValue={userStore.currentUser?.roleProfile.teachLanguages.map((x) => x.id)}
											name="teachLanguages"
											label={t('dashboard.label.language')}
										>
											<Select
												value={userStore.currentUser?.roleProfile.teachLanguages.map((x) => x.id)}
												showSearch
												placeholder={t('dashboard.placeholder.select_your_language')}
												filterOption={(input, option) =>
													(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
												}
												options={globalStore.courseLanguages.map((la) => ({
													value: la.id,
													label: la.name,
												}))}
												mode="multiple"
											/>
										</Form.Item>
									)}
								</Col>
								<Col span={12}>
									<Form.Item
										initialValue={userStore.currentUser?.profile.lastName}
										name="lastName"
										label={t('dashboard.label.last_name')}
										rules={[
											{
												required: true,
											},
										]}
									>
										<Input placeholder={t('dashboard.placeholder.enter_last_name')} />
									</Form.Item>
									<Form.Item initialValue={userStore.currentUser?.profile.address} name="address" label={t('dashboard.label.address')}>
										<Input type="text" placeholder={t('dashboard.placeholder.enter_address')} />
									</Form.Item>
									<Form.Item initialValue={moment(userStore.currentUser?.profile.dob)} name="dob" label={t('dashboard.label.dob')}>
										<DatePicker className="tw-w-full" format={'DD/MM/YYYY'} />
									</Form.Item>
									{(userStore.currentUser?.role == ROLE_TYPE.INSTRUCTOR ||
										userStore.currentUser?.role == ROLE_TYPE.TUTOR) && (
										<Form.Item
											initialValue={userStore.currentUser?.roleProfile.hourRate}
											name="hourRate"
											label={t('dashboard.label.hour_rate')}
										>
											<Input type="number" placeholder={t('dashboard.placeholder.enter_hour_rate')} />
										</Form.Item>
									)}
								</Col>
							</Row>
							{(userStore.currentUser?.role == ROLE_TYPE.INSTRUCTOR ||
								userStore.currentUser?.role == ROLE_TYPE.TUTOR) && (
								<Form.Item
									initialValue={userStore.currentUser?.roleProfile.bio}
									name="bio"
									label={t('dashboard.label.bio')}
									rules={[
										{
											required: true,
										},
									]}
								>
									<TextArea placeholder={t('dashboard.placeholder.enter_bio')} rows={4} />
								</Form.Item>
							)}
							<Button
								className={`${TAILWIND_CLASS.BUTTON_ANTD} tw-w-1/5 tw-rounded-lg tw-mb-4`}
								onClick={() => {
									setIsOpenModalSocial(true);
								}}
							>
								{t('dashboard.button.social_links')}
							</Button>
							<Button
								htmlType="submit"
								form="user"
								className={`${TAILWIND_CLASS.BUTTON_ANTD} tw-w-full tw-rounded-lg`}
								loading={updateProfileMutation.isLoading}
							>
								{t('dashboard.button.update')}
							</Button>

							{/* ADD SOCIAL MODAL */}
							<Form.Item name="socialLinks" initialValue={userStore.currentUser?.profile.socialLinks} />
							<Modal
								title={<div className="tw-text-lg tw-font-bold">{t('dashboard.button.add_social_links')}</div>}
								width={600}
								open={isOpenModalSocial}
								footer={
									<Button
										htmlType="submit"
										form="social"
										className={`${TAILWIND_CLASS.BUTTON_ANTD} tw-w-full tw-rounded-lg`}
									>
										{t('dashboard.button.update')}
									</Button>
								}
								destroyOnClose
								maskClosable={false}
								keyboard
								onCancel={() => {
									setIsOpenModalSocial(false);
								}}
							>
								<Form id="social" onFinish={onFinishUpdateSocial} form={formUpdateSocialUser} layout="vertical">
									<Form.Item
										name="linkedin"
										label="Linkedin"
										initialValue={userStore.currentUser?.profile.socialLinks?.linkedin}
									>
										<Input placeholder={t('dashboard.placeholder.enter_url_social_media_account')} />
									</Form.Item>
									<Form.Item
										name="facebook"
										label="Facebook"
										initialValue={userStore.currentUser?.profile.socialLinks?.facebook}
									>
										<Input placeholder={t('dashboard.placeholder.enter_url_social_media_account')} />
									</Form.Item>
									<Form.Item
										name="instagram"
										label="Instagram"
										initialValue={userStore.currentUser?.profile.socialLinks?.instagram}
									>
										<Input placeholder={t('dashboard.placeholder.enter_url_social_media_account')} />
									</Form.Item>
									<Form.Item
										name="youtube"
										label="Youtube"
										initialValue={userStore.currentUser?.profile.socialLinks?.youtube}
									>
										<Input placeholder={t('dashboard.placeholder.enter_url_social_media_account')} />
									</Form.Item>
									<Form.Item
										name="twitter"
										label="Twitter"
										initialValue={userStore.currentUser?.profile.socialLinks?.twitter}
									>
										<Input placeholder={t('dashboard.placeholder.enter_url_social_media_account')} />
									</Form.Item>
								</Form>
							</Modal>
						</Form>
					</div>
				)}
			</DashboardRoute>
		</>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default EditProfile;
