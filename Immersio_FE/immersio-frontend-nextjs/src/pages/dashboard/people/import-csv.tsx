import ImportCsvReportModal from '@/components/People/ImportCsvReportModal';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { RouterConstants } from '@/constants/router';
import { useMutation } from '@/hooks/useMutation';
import { ROLE_TYPE } from '@/src/interfaces/auth/auth.interface';
import { Option } from '@/src/interfaces/common/common.interface';
import {
	ImportInstructorsRequest,
	ImportInstructorsResponse,
	ReportItem,
} from '@/src/interfaces/people/people.interface';
import { importInstructorsCSV } from '@/src/services/people/apiPeople';
import { LeftOutlined } from '@ant-design/icons';
import { Button, Form, Input, Select } from 'antd';
import { useForm } from 'antd/lib/form/Form';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useRef, useState } from 'react';
import { toast } from 'react-toastify';

const ImportInstructorByCSV = () => {
	const { role } = useRouter().query;
	const router = useRouter();
	const [formSubmitCsv] = useForm<ImportInstructorsRequest>();
	const [isNextStep, setIsNextStep] = useState<boolean>(false);
	const [file, setFile] = useState(null);
	const [headers, setHeaders] = useState<Option<string>[]>([]);
	const [isOpenReportModal, setIsOpenReportModal] = useState<boolean>(false);
	const importItems = useRef<ReportItem[]>([]);

	const handleFileRead = (event) => {
		const csvData = event.target.result;
		const lines = csvData.split('\n');
		if (lines.length > 0) {
			const headerRow = lines[0];
			const extractedHeaders: string[] = headerRow.split(',');
			setHeaders(extractedHeaders.map((header) => ({ label: header, value: header })));
		}
	};

	const handleFileChange = (event) => {
		const selectedFile = event.target.files[0];
		setFile(selectedFile);
		if (selectedFile) {
			const reader = new FileReader();
			reader.onload = handleFileRead;
			reader.readAsText(selectedFile);
		}
	};
	/* --------------------------------- IMPORT --------------------------------- */
	const importMutation = useMutation<ImportInstructorsResponse[], ImportInstructorsRequest>(importInstructorsCSV, {
		onSuccess: (res) => {
			const errorItems = res.data.filter((item) => item.success === false);
			if (errorItems.length === 0) {
				toast.success('Upload successfully!');
			} else {
				importItems.current = errorItems.map((x) => ({ name: x.first_name + ' ' + x.last_name, errors: [x.error] }));
				setIsOpenReportModal(true);
			}
			formSubmitCsv.resetFields();
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});
	const onFinish = (values: ImportInstructorsRequest) => {
		const formData = new FormData();
		formData.append('file', file);
		switch (role) {
			case ROLE_TYPE.INSTRUCTOR:
				importMutation.mutate({
					...values,
					file: formData,
				});
				break;

			default:
				break;
		}
	};

	return (
		<DashboardRoute>
			<Head>
				<title>Import Instructor</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div>
				<div
					onClick={() => router.push(RouterConstants.DASHBOARD_PEOPLE_INSTRUCTOR.path)}
					className="tw-cursor-pointer tw-flex tw-justify-start tw-items-center tw-text-lg"
				>
					<LeftOutlined className="tw-mr-4" />
					Back
				</div>

				<div className="tw-flex tw-flex-col tw-gap-6 tw-mt-6">
					<div className="tw-text-2xl tw-font-semibold">
						{isNextStep ? 'Step 2: Mapping and Import' : 'Step 1: Import csv file'}
					</div>
					{isNextStep ? (
						<Form id="csv" form={formSubmitCsv} layout="vertical" onFinish={onFinish}>
							<div className="tw-grid tw-grid-cols-3 tw-gap-4">
								<div>
									<Form.Item
										name="firstName"
										label="First name"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'first_name'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'first_name'}
										/>
									</Form.Item>
									<Form.Item
										name="lastName"
										label="Last name"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'last_name'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'last_name'}
										/>
									</Form.Item>
									<Form.Item
										name="email"
										label="Email"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'email'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'email'}
										/>
									</Form.Item>
									<Form.Item
										name="phoneNumber"
										label="Phone number"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'phone_number'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'phone_number'}
										/>
									</Form.Item>
									<Form.Item
										name="hourRate"
										label="Hourly rate"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'hourly_rate'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'hourly_rate'}
										/>
									</Form.Item>
									<Form.Item
										name="teachLanguages"
										label="Language Teaching"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'language_teaching'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'language_teaching'}
										/>
									</Form.Item>
									<Form.Item
										name="languageSpoken"
										label="Language Spoken"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'language_spoken'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'language_spoken'}
										/>
									</Form.Item>
								</div>
								<div>
									<Form.Item
										name="classTag"
										label="Class Tag"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'class_tag'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'class_tag'}
										/>
									</Form.Item>
									<Form.Item
										name="accountStatus"
										label="Account Status"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'account_status'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'account_status'}
										/>
									</Form.Item>
									<Form.Item
										name="timeZone"
										label="Timezone"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'timezone'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'timezone'}
										/>
									</Form.Item>
									<Form.Item
										name="address"
										label="Address"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'address'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'address'}
										/>
									</Form.Item>
									<Form.Item
										name="dialCode"
										label="Country code"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'dial_code'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'dial_code'}
										/>
									</Form.Item>
									<Form.Item
										name="zipCode"
										label="ZipCode/Postal code"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'zip_code'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'zip_code'}
										/>
									</Form.Item>

									<Form.Item
										name="city"
										label="City"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'city'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'city'}
										/>
									</Form.Item>
								</div>
								<div>
									<Form.Item
										name="state"
										label="State"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'state'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'state'}
										/>
									</Form.Item>
									<Form.Item
										name="country"
										label="Country"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'country'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'country'}
										/>
									</Form.Item>
									<Form.Item
										name="avatarUrl"
										label="Avatar"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'avatar_url'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'avatar_url'}
										/>
									</Form.Item>
									<Form.Item
										name="qualification"
										label="Qualification"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'qualification'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'qualification'}
										/>
									</Form.Item>
									<Form.Item
										name="teachingExperience"
										label="Teaching Experience"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'teaching_experience'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'teaching_experience'}
										/>
									</Form.Item>
									<Form.Item
										name="bio"
										label="Bio"
										rules={[
											{
												required: true,
												message: 'Please select field',
											},
										]}
										initialValue={'bio'}
									>
										<Select
											showSearch
											filterOption={(input, option) =>
												(option?.label ?? '').toLowerCase().includes(input.toLowerCase())
											}
											placeholder="Map a field on csv file"
											options={headers}
											defaultValue={'bio'}
										/>
									</Form.Item>
								</div>
							</div>
							<Button form="csv" type="primary" className="tw-w-fit" htmlType="submit">
								Import
							</Button>
						</Form>
					) : (
						<Form id="file" layout="vertical">
							<Form.Item
								className=""
								name={'file'}
								rules={[
									{
										required: true,
										message: 'Please choose file',
									},
								]}
							>
								<Input type="file" accept=".csv" onChange={handleFileChange} className="tw-border-none tw-pl-0" />
							</Form.Item>
							<Button
								form="file"
								type="primary"
								htmlType="submit"
								className="tw-w-fit"
								onClick={() => {
									if (file) {
										setTimeout(() => {
											setIsNextStep(true);
										});
									}
								}}
							>
								Next
							</Button>
						</Form>
					)}
				</div>
				<ImportCsvReportModal
					reportItems={importItems.current}
					isOpen={isOpenReportModal}
					setIsOpen={setIsOpenReportModal}
				/>
			</div>
		</DashboardRoute>
	);
};

export default ImportInstructorByCSV;
