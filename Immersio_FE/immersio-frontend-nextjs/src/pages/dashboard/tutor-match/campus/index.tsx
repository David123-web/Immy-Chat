import CustomTable from '@/components/common/CustomTable';
import HeaderTable from '@/components/common/HeaderTable';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { PAGE_SIZE } from '@/constants';
import { RouterConstants } from '@/constants/router';
import { useMutation } from '@/hooks/useMutation';
import { useQuery } from '@/hooks/useQuery';
import { ICommonSearchRequest, Option } from '@/src/interfaces/common/common.interface';
import { IHeaderTable } from '@/src/interfaces/mydrive/mydrive.interface';
import { IGetCampusResponse, ITutorMatchCampusTable } from '@/src/interfaces/tutorMatch/tutorMatch.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { deleteCampus, getCampuses } from '@/src/services/tutorMatch/apiTutorMatch';
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { Button, Form, Pagination } from 'antd';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { toast } from 'react-toastify';

const columns: IHeaderTable<ITutorMatchCampusTable & { tools: string }>[] = [
	{
		label: 'Campus',
		key: 'campus',
		widthGrid: '1fr',
	},
	{
		label: 'Location',
		key: 'location',
		widthGrid: '1fr',
	},
	{
		label: 'Manager',
		key: 'manager',
		widthGrid: '1fr',
	},
	{
		label: 'Status',
		key: 'status',
		widthGrid: '1.5fr',
	},
	{
		label: 'Actions',
		key: 'tools',
		widthGrid: '1fr',
	},
];

const TutorCampus = () => {
	const router = useRouter();
	const [currentPage, setCurrentPage] = useState(1);
	const [formSearch] = Form.useForm<ICommonSearchRequest>();

	/* ---------------------------- GET TUTORING PLAN --------------------------- */
	const searchTutorClassOptions: Option<keyof any>[] = [
		{
			value: 'campus',
			label: 'Campus',
		},
		{
			value: 'location',
			label: 'Location',
		},
	];

	/* ------------------------------- GET CAMPUS ------------------------------- */
	const [listCampuses, setListCampuses] = useState<IGetCampusResponse>({
		total: 0,
		data: [],
	});
	const [searchKey, setSearchKey] = useState<string>('');
	const getCampusesQuery = useQuery<any, IGetCampusResponse>(
		['getCampusesQueryNew', currentPage, searchKey],
		() =>
			getCampuses({
				take: PAGE_SIZE,
				skip: PAGE_SIZE * (currentPage - 1),
				searchBy: formSearch.getFieldValue('searchBy'),
				searchKey: searchKey,
			}),
		{
			onSuccess: (res) => {
				setListCampuses(res.data);
				// if (res.data.users.length === 0 || searchKey) {
				// 	setCurrentPage(1);
				// }
			},
			onError: (err) => {
				toast.error(err.data?.message);
			},
		}
	);

	/* ------------------------------ DELETE CAMPUS ----------------------------- */
	const deleteCampusMutation = useMutation<string, any>(deleteCampus, {
		onSuccess: (res) => {
			getCampusesQuery.refetch();
			toast.success('Delete Campus successfully!');
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	return (
		<>
			<Head>
				<title>Tutor campus</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<DashboardRoute>
				<HeaderTable
					tableName={'Campus'}
					form={formSearch}
					searchOptions={searchTutorClassOptions}
					onAdd={() => router.push(RouterConstants.DASHBOARD_TUTOR_MATCH_ADD_CAMPUS.path)}
					onGetSearchKey={(searchKey) => {}}
				/>
				<CustomTable
					className="border-theme-6 tw-border tw-border-solid tw-shadow-lg tw-rounded-b-xl"
					columns={columns}
					isLoading={getCampusesQuery.isFetching}
					data={listCampuses.data.map((item) => ({
						campus: item.name,
						location: item.address,
						manager: item.managerName,
						status: <div className="tw-capitalize">{item.status}</div>,
						tools: (
							<div className="tw-flex tw-items-center tw-gap-1">
								<Button
									icon={
										<EditOutlined
											style={{
												fontSize: 16,
											}}
										/>
									}
									className="bg-theme-4 color-theme-7 !tw-border-none"
									onClick={() => router.push(`campus/${item.id}`)}
								/>
								<Button
									icon={
										<DeleteOutlined
											style={{
												fontSize: 16,
											}}
										/>
									}
									className="!tw-bg-deleteIconDavid color-theme-7 !tw-border-none"
									onClick={() => {
										deleteCampusMutation.mutate(item.id);
									}}
								/>
							</div>
						),
					}))}
				/>
				<Pagination
					className="!tw-mt-6 tw-flex tw-justify-end"
					total={listCampuses.total}
					pageSize={PAGE_SIZE}
					current={1}
					onChange={(page: number) => {
						setCurrentPage(page);
					}}
				/>
			</DashboardRoute>
		</>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default TutorCampus;
