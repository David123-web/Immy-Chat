import TutorInforModal from '@/components/TutorMatch/TutorInforModal';
import ViewListClassesModal from '@/components/TutorMatch/ViewListClassesModal';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { TAILWIND_CLASS } from '@/constants';
import { useMutation } from '@/hooks/useMutation';
import { useQuery } from '@/hooks/useQuery';
import { GetTutorInfoResponse, ITutorClass } from '@/src/interfaces/tutorMatch/tutorMatch.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { getClassByTutor, getTutorInfo } from '@/src/services/tutorMatch/apiTutorMatch';
import { globalStore } from '@/src/stores/global/global.store';
import { LeftOutlined, RightOutlined } from '@ant-design/icons';
import { Button, Carousel, Col, DatePicker, Empty, Form, Rate, Row, Select } from 'antd';
import Head from 'next/head';
import { useRef, useState } from 'react';
import { toast } from 'react-toastify';

const dummyData = [...Array(14)];
const TutorMatchTutors = () => {
	const carouselRef = useRef(null);
	const [isOpenViewClassesModal, setIsOpenViewClassesModal] = useState<boolean>(false);
	const [isOpenTutorInforModal, setIsOpenTutorInforModal] = useState<boolean>(false);

	const handleNext = () => {
		if (carouselRef.current) {
			carouselRef.current.next();
		}
	};

	const handlePrevious = () => {
		if (carouselRef.current) {
			carouselRef.current.prev();
		}
	};

	const renderGroupTutorInfor = (data: any[]) => {
		return data.map((section, i) => {
			return (
				<>
					<Row gutter={[32, 32]}>{renderTutorInfor(section)}</Row>
				</>
			);
		});
	};

	/* ----------------------------- GET TUTOR INFO ----------------------------- */
	const [tutorList, setTutorList] = useState<GetTutorInfoResponse[]>([]);
	const tutorInfor = useRef<GetTutorInfoResponse>(null);
	const getTutorInfoQuery = useQuery<any, GetTutorInfoResponse[]>(['GetTutorInfoResponse'], () => getTutorInfo(), {
		onSuccess: (res) => {
			console.log(res.data);
			setTutorList(res.data);
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	const renderTutorInfor = (data: GetTutorInfoResponse[]) => {
		return data.map((section, i) => {
			return (
				<Col span={6}>
					<div className="tw-flex tw-flex-col tw-gap-3 tw-mb-16">
						<div className="tw-flex tw-items-center tw-justify-between">
							<h4>{section.profile.firstName + ' ' + section.profile.lastName}</h4>
							<Rate className="custom-rate tw-w-1/2" style={{ fontSize: '12px' }} disabled value={5} />
						</div>
						<div>Living in Ontario, Canada</div>
						<img
							className="tw-object-cover tw-rounded-lg tw-w-full tw-aspect-square tw-cursor-pointer"
							src={section.profile.avatarUrl}
							alt=""
							onClick={() => {
								tutorInfor.current = section;
								setIsOpenTutorInforModal(true);
							}}
						/>
						<Button
							className={`${TAILWIND_CLASS.BUTTON_ANTD} tw-w-fit tw-rounded`}
							onClick={() => {
								tutorInfor.current = section;
								getClassByTutorMutation.mutate(section.id);
							}}
						>
							View Class
						</Button>
						<h5>{section.teachLanguages.map((x) => x.name).join(' | ')}</h5>
						<p>{section.profile.description}</p>
					</div>
				</Col>
			);
		});
	};

	/* --------------------------- GET CLASS BY TUTOR --------------------------- */
	const [currentListOfClass, setCurrentListOfClass] = useState<ITutorClass[]>([]);
	const getClassByTutorMutation = useMutation<ITutorClass[], number>(getClassByTutor, {
		onSuccess: (res) => {
			res.data.forEach((x) => {
				x.tutor = tutorInfor.current;
			});
			setCurrentListOfClass(res.data);
			setIsOpenViewClassesModal(true);
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	return (
		<DashboardRoute>
			<Head>
				<title>Tutors</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div>
				<Form className="tw-w-full tw-m-auto tw-mb-6" layout="vertical">
					<Row gutter={[24, 24]}>
						<Col span={8}>
							<Form.Item name="languages" label="Languages">
								<Select
									className="tw-w-full"
									showSearch
									placeholder="Select a language"
									filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())}
									options={globalStore.courseLanguages.map((la) => ({
										value: la.id,
										label: la.name,
									}))}
								/>
							</Form.Item>
						</Col>
						<Col span={8}>
							<Form.Item name="location" label="Location">
								<Select
									showSearch
									placeholder="Select a location"
									filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())}
									options={globalStore.timezone.map((la) => ({
										value: la.value,
										label: la.text,
									}))}
								/>
							</Form.Item>
						</Col>
						<Col span={8}>
							<Form.Item name="date" label="Date">
								<DatePicker className="tw-w-full" />
							</Form.Item>
						</Col>
					</Row>
				</Form>
				{tutorList.length > 0 ? (
					<div className="tw-relative">
						<LeftOutlined
							className="tw-text-3xl tw-absolute tw-left-0 tw-top-1/2 tw-transform tw-translate-y-[calc(-50%-4rem)] tw-cursor-pointer"
							onClick={handlePrevious}
						/>
						<div className="custom-carousel tw-w-[92%] tw-mx-auto">
							<Carousel ref={carouselRef}>
								{renderGroupTutorInfor(
									tutorList.reduce((acc, _, index) => {
										if (index % 4 === 0) {
											acc.push(tutorList.slice(index, index + 4));
										}
										return acc;
									}, [])
								)}
							</Carousel>
						</div>
						<RightOutlined
							className="tw-text-3xl tw-absolute tw-right-0 tw-top-1/2 tw-transform tw-translate-y-[calc(-50%-4rem)] tw-cursor-pointer"
							onClick={handleNext}
						/>
					</div>
				) : (
					<Empty />
				)}
			</div>
			{tutorInfor.current && (
				<ViewListClassesModal
					data={{ tutorInfo: tutorInfor.current, listOfClass: currentListOfClass }}
					isOpenModal={isOpenViewClassesModal}
					setIsOpenModal={setIsOpenViewClassesModal}
					refetchData={() => getClassByTutorMutation.mutate(tutorInfor.current.id)}
				/>
			)}
			{tutorInfor.current && (
				<TutorInforModal
					tutorInfor={tutorInfor.current}
					isOpenModal={isOpenTutorInforModal}
					setIsOpenModal={setIsOpenTutorInforModal}
				/>
			)}
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default TutorMatchTutors;
