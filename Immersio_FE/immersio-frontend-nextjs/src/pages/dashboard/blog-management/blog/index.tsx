import CustomTable from '@/components/common/CustomTable';
import HeaderTable from '@/components/common/HeaderTable';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { PAGE_SIZE } from '@/constants';
import { RouterConstants } from '@/constants/router';
import { useMutation } from '@/hooks/useMutation';
import { useQuery } from '@/hooks/useQuery';
import { IBlogTable, IGetBlogResponse } from '@/src/interfaces/blogManagement/blogManagement.interface';
import { ICommonSearchRequest, Option } from '@/src/interfaces/common/common.interface';
import { IHeaderTable } from '@/src/interfaces/mydrive/mydrive.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { deleteBlogById, getBlog } from '@/src/services/blogManagement/apiBlogManagement';
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { Button, Form, Pagination } from 'antd';
import dayjs from 'dayjs';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { useTranslation } from 'next-i18next';
import { toast } from 'react-toastify';

const dummyData: IBlogTable[] = [
	{
		title: 'Blog1',
		category: 'Category1',
		author: 'Author1',
		publishedAt: new Date(),
	},
	{
		title: 'Blog2',
		category: 'Category2',
		author: 'Author2',
		publishedAt: new Date(),
	},
];

const Blog = () => {
	const { t } = useTranslation();
	const router = useRouter();
	const [currentPage, setCurrentPage] = useState(1);
	const [formSearch] = Form.useForm<ICommonSearchRequest>();

	/* ---------------------------- GET LIST OF BLOGS --------------------------- */
	const [listOfBlogs, setListOfBlogs] = useState<IGetBlogResponse>({
		total: 0,
		data: [],
	});

	const getListOfBlogsQuery = useQuery<any>(
		['IGetBlogResponse', currentPage],
		() =>
			getBlog({
				take: PAGE_SIZE,
				skip: PAGE_SIZE * (currentPage - 1),
			}),
		{
			onSuccess: (res) => {
				setListOfBlogs({ total: 100, data: res.data.filter((x) => !x.isDeleted) });
			},
			onError: (err) => {
				toast.error(err.data?.message);
			},
		}
	);

	const searchBlogOptions: Option<keyof any>[] = [
		{
			value: 'title',
			label: t('dashboard.option.title'),
		},
		{
			value: 'category',
			label: t('dashboard.option.category'),
		},
		{
			value: 'author',
			label: t('dashboard.option.author'),
		},
	];

	const columns: IHeaderTable<IBlogTable & { tools: string }>[] = [
		{
			label: t('dashboard.option.title'),
			key: 'title',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.category'),
			key: 'category',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.author'),
			key: 'author',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.published_date'),
			key: 'publishedAt',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.actions'),
			key: 'tools',
			widthGrid: '1fr',
		},
	];

	/* ------------------------------- DELETE BLOG ------------------------------ */
	const onDeleteFAQCategoryMutation = useMutation<any, string>(deleteBlogById, {
		onSuccess: (res) => {
			toast.success(t('dashboard.notification.delete_blog_success'));
			getListOfBlogsQuery.refetch();
		},
		onError: (err) => {
			toast.error(t('dashboard.notification.delete_blog_failed'));
		},
	});

	return (
		<DashboardRoute>
			<Head>
				<title>Blog management</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<HeaderTable
				tableName={t('dashboard.title.blog')}
				form={formSearch}
				searchOptions={searchBlogOptions}
				onAdd={() => router.push(RouterConstants.DASHBOARD_BLOG_MANAGEMENT_ADD_BLOG.path)}
				onGetSearchKey={(searchKey) => {}}
			/>
			<CustomTable
				className="border-theme-6 tw-border tw-border-solid tw-shadow-lg tw-rounded-b-xl"
				columns={columns}
				isLoading={false}
				data={listOfBlogs.data.map((item) => ({
					title: item.title,
					category: item.category.name,
					author: item.author,
					publishedAt: dayjs(item.createdAt).format('DD/MM/YYYY'),
					tools: (
						<div className="tw-flex tw-items-center tw-gap-1">
							<Button
								icon={
									<EditOutlined
										style={{
											fontSize: 16,
										}}
									/>
								}
								className="bg-theme-4 color-theme-7 !tw-border-none"
								onClick={() => router.push(`blog/${item.id}`)}
							/>
							<Button
								icon={
									<DeleteOutlined
										style={{
											fontSize: 16,
										}}
									/>
								}
								className="!tw-bg-deleteIconDavid color-theme-7 !tw-border-none"
								onClick={() => onDeleteFAQCategoryMutation.mutate(item.id)}
							/>
						</div>
					),
				}))}
			/>
			<Pagination
				className="!tw-mt-6 tw-flex tw-justify-end"
				total={dummyData.length}
				pageSize={PAGE_SIZE}
				current={1}
				onChange={(page: number) => {
					setCurrentPage(page);
				}}
			/>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default Blog;
