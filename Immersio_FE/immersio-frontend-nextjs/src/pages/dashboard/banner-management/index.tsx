import CustomTable from '@/components/common/CustomTable';
import HeaderTable from '@/components/common/HeaderTable';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { PAGE_SIZE } from '@/constants';
import { RouterConstants } from '@/constants/router';
import { BANNER_STATUS, IBannersTable } from '@/src/interfaces/bannerManagement/bannerManagement.interface';
import { ICommonSearchRequest, Option } from '@/src/interfaces/common/common.interface';
import { IHeaderTable } from '@/src/interfaces/mydrive/mydrive.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { DeleteOutlined, EditOutlined } from '@ant-design/icons';
import { Button, Form, Modal, Pagination } from 'antd';
import { useTranslation } from 'next-i18next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';

const dummyData: IBannersTable[] = [
	{
		imgUrl: 'https://picsum.photos/200',
		text: 'Banner 1',
		order: 1,
		status: BANNER_STATUS.ACTIVE,
	},
	{
		imgUrl: 'https://picsum.photos/200/300',
		text: 'Banner 2',
		order: 2,
		status: BANNER_STATUS.ACTIVE,
	},
];

const Banners = () => {
	const { t } = useTranslation();
	const router = useRouter();
	const [currentPage, setCurrentPage] = useState(1);
	const [formSearch] = Form.useForm<ICommonSearchRequest>();
	const [isOpenBannerReview, setIsOpenBannerReview] = useState(false);

	const columns: IHeaderTable<IBannersTable & { tools: string }>[] = [
		{
			label: t('dashboard.option.banner_image'),
			key: 'imgUrl',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.banner_text'),
			key: 'text',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.status'),
			key: 'status',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.order_number'),
			key: 'order',
			widthGrid: '1fr',
		},
		{
			label: t('dashboard.option.actions'),
			key: 'tools',
			widthGrid: '1fr',
		},
	];

	const searchFAQCategoriesOptions: Option<keyof any>[] = [
		{
			value: 'text',
			label: t('dashboard.option.banner_text'),
		},
		{
			value: 'status',
			label: t('dashboard.option.status'),
		},
	];

	return (
		<DashboardRoute>
			<Head>
				<title>Banner management</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<HeaderTable
				tableName={t('dashboard.title.banner')}
				form={formSearch}
				searchOptions={searchFAQCategoriesOptions}
				onAdd={() => router.push(RouterConstants.DASHBOARD_BANNER_MANAGEMENT_ADD_BANNER.path)}
				onGetSearchKey={(searchKey) => {}}
				customHeaderButton={
					<Button
						onClick={() => {
							setIsOpenBannerReview(true);
						}}
						className={`tw-rounded-md tw-px-8 tw-h-10 tw-flex tw-items-center tw-justify-center`}
					>
						{t('dashboard.button.preview')}
					</Button>
				}
			/>
			<CustomTable
				className="border-theme-6 tw-border tw-border-solid tw-shadow-lg tw-rounded-b-xl"
				columns={columns}
				isLoading={false}
				data={dummyData.map((item) => ({
					...item,
					imgUrl: <img className="tw-h-32" src={item.imgUrl} />,
					tools: (
						<div className="tw-flex tw-items-center tw-gap-1">
							<Button
								icon={
									<EditOutlined
										style={{
											fontSize: 16,
										}}
									/>
								}
								className="bg-theme-4 color-theme-7 !tw-border-none"
								onClick={() => {}}
							/>
							<Button
								icon={
									<DeleteOutlined
										style={{
											fontSize: 16,
										}}
									/>
								}
								className="!tw-bg-deleteIconDavid color-theme-7 !tw-border-none"
								onClick={() => {}}
							/>
						</div>
					),
				}))}
			/>
			<Pagination
				className="!tw-mt-6 tw-flex tw-justify-end"
				total={dummyData.length}
				pageSize={PAGE_SIZE}
				current={1}
				onChange={(page: number) => {
					setCurrentPage(page);
				}}
			/>
			<Modal
				title={t('dashboard.modal.review_banner')}
				open={isOpenBannerReview}
				footer={null}
				width={400}
				destroyOnClose
				maskClosable={false}
				keyboard
				onCancel={() => {
					setIsOpenBannerReview(false);
				}}
			></Modal>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default Banners;
