import ThemeItem from '@/components/Settings/SchemeColorItem/ThemeItem';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { TAILWIND_CLASS } from '@/constants';
import { useMutation } from '@/hooks/useMutation';
import { IUpdateThemeRequest, THEME_ITEMS, ThemeType } from '@/src/interfaces/settings/settings.interfaces';
import { IUploadAvatarResponse } from '@/src/interfaces/user/user.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { updateTheme } from '@/src/services/settings/apiSettings';
import { uploadAvatar } from '@/src/services/user/apiUser';
import { beforeUploadAvatar, getBase64 } from '@/src/utilities/helper';
import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';
import { Button, Form, Spin, Upload, message } from 'antd';
import { RcFile, UploadChangeParam, UploadFile, UploadProps } from 'antd/lib/upload';
import { useTranslation } from 'next-i18next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { useMobXStores } from '@/src/stores';

const ThemeAndLogoPage = () => {
	const { t } = useTranslation();
	const { subdomainStore } = useMobXStores();
	const [imageLogoPreview, setImageLogoPreview] = useState<string>();
	const [imageFaviconPreview, setImageFaviconPreview] = useState<string>('');
	const [logoUrl, setLogoUrl] = useState<string>();
	const [faviconUrl, setFaviconUrl] = useState<string>();
	const [loadingFavicon, setLoadingFavicon] = useState(false);
	const [loadingLogo, setLoadingLogo] = useState(false);
	const [themeSelected, setThemeSelected] = useState<string>(subdomainStore.subdomain.subdomainTheme.primaryColor);
	const [isUploadFavicon, setIsUploadFavicon] = useState(false);

	useEffect(() => {
		setImageLogoPreview(subdomainStore.subdomain.subdomainTheme.logoUrl);
	}, []);

	const handleChange: UploadProps['onChange'] = (info: UploadChangeParam<UploadFile>) => {
		if (info.file.status === 'uploading') {
			return;
		}
		const reader = new FileReader();
		reader.readAsDataURL(info.file.originFileObj);
		getBase64(info.file.originFileObj as RcFile, (url) => {
			isUploadFavicon ? setImageFaviconPreview(url) : setImageLogoPreview(url);
		});

		const formData = new FormData();
		formData.append('file', info.file.originFileObj as any);
		isUploadFavicon ? setLoadingFavicon(true) : setLoadingLogo(true);
		uploadFileMutation.mutate(formData);
	};

	const uploadLoading = (isLoading: boolean) => {
		return (
			<div>
				{isLoading ? <LoadingOutlined /> : <PlusOutlined />}
				<div style={{ marginTop: 8 }}>{t('dashboard.button.upload')}</div>
			</div>
		);
	};

	const uploadFileMutation = useMutation<IUploadAvatarResponse, any>(uploadAvatar, {
		onSuccess: (res) => {
			isUploadFavicon ? setFaviconUrl(res.data.avatarUrl) : setLogoUrl(res.data.avatarUrl);
		},
		onError: (err) => {
			isUploadFavicon ? setImageFaviconPreview(undefined) : setImageLogoPreview(undefined);
			toast.error(err.data?.message);
		},
		onSettled: () => {
			isUploadFavicon ? setLoadingFavicon(false) : setLoadingLogo(false);
		},
	});

	const updateThemeMutation = useMutation<any, IUpdateThemeRequest>(updateTheme, {
		onSuccess: () => {
			toast.success(t('dashboard.notification.theme_and_logo_updated_successfully'));
			window.location.reload();
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});

	const onFinish = () => {
		const theme = THEME_ITEMS.find((item) => item.colors.primaryColor === themeSelected);
		updateThemeMutation.mutate({
			logoUrl,
			faviconUrl,
			...theme.colors,
		});
	};

	return (
		<DashboardRoute>
			<Head>
				<title>Theme and logo</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div className="tw-text-3xl tw-font-semibold">{t('dashboard.title.theme_and_logo')}</div>
			<Form layout="vertical" className="tw-my-8" onFinish={onFinish}>
				<div className="tw-flex tw-gap-10">
					<Form.Item name="faviconUrl" label="Favicon">
						<Upload
							name="faviconUrl"
							listType="picture-card"
							className="avatar-uploader"
							showUploadList={false}
							beforeUpload={beforeUploadAvatar}
							onChange={(info) => {
								handleChange(info);
								setIsUploadFavicon(true);
							}}
							disabled={loadingFavicon}
						>
							{imageFaviconPreview ? (
								<div className="tw-w-full tw-h-full tw-relative">
									<img src={imageFaviconPreview} alt="avatar" className="tw-w-full tw-h-full tw-object-contain" />
									{loadingFavicon && (
										<div className="tw-w-full tw-h-full tw-absolute tw-top-0 tw-left-0 bg-theme-7 tw-opacity-50 tw-flex tw-justify-center tw-items-center">
											<Spin />
										</div>
									)}
								</div>
							) : (
								uploadLoading(loadingFavicon)
							)}
						</Upload>
						<div className="tw-font-light">{t('dashboard.label.upload_512_512_png_image')}</div>
					</Form.Item>
					<Form.Item name="logoUrl" label="Logo">
						<Upload
							name="logoUrl"
							listType="picture-card"
							className="avatar-uploader"
							showUploadList={false}
							beforeUpload={beforeUploadAvatar}
							onChange={(info) => {
								handleChange(info);
								setIsUploadFavicon(false);
							}}
							disabled={loadingLogo}
						>
							{imageLogoPreview ? (
								<div className="tw-w-full tw-h-full tw-relative">
									<img src={imageLogoPreview} alt="avatar" className="tw-w-full tw-h-full tw-object-contain" />
									{loadingLogo && (
										<div className="tw-w-full tw-h-full tw-absolute tw-top-0 tw-left-0 bg-theme-7 tw-opacity-50 tw-flex tw-justify-center tw-items-center">
											<Spin />
										</div>
									)}
								</div>
							) : (
								uploadLoading(loadingLogo)
							)}
						</Upload>
					</Form.Item>
				</div>
				<Form.Item name="theme" label={t('dashboard.label.theme_colour')}>
					<div className="tw-grid tw-grid-cols-3 tw-gap-4">
						{THEME_ITEMS.map((item) => {
							return (
								<ThemeItem
									colors={item.colors}
									title={item.title}
									isSelected={item.colors.primaryColor === themeSelected}
									onClick={() => setThemeSelected(item.colors.primaryColor)}
								/>
							);
						})}
					</div>
				</Form.Item>
				<Button
					className={`${TAILWIND_CLASS.BUTTON_ANTD} !tw-px-6 !tw-rounded-md`}
					size="large"
					htmlType="submit"
					disabled={updateThemeMutation.isLoading}
					loading={updateThemeMutation.isLoading}
				>
					{t('dashboard.button.update')}
				</Button>
			</Form>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
	return await withTranslationsProps(ctx);
}

export default ThemeAndLogoPage;
