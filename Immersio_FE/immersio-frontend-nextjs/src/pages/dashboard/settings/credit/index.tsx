import HeaderTable from '@/components/common/HeaderTable';
import DashboardRoute from '@/components/routes/DashboardRoute';
import { useQuery } from '@/hooks/useQuery';
import { ICreditsResponse } from '@/src/interfaces/subscriptions/subscriptions.interface';
import { withTranslationsProps } from '@/src/next/with-app';
import { getCreditValue } from '@/src/services/settings/apiSettings';
import { EditOutlined } from '@ant-design/icons';
import { Button, Table } from 'antd';
import { ColumnsType } from 'antd/lib/table';
import Head from 'next/head';
import React, { useState } from 'react';
import { toast } from 'react-toastify';

const Page = () => {
	const columnsTableCredit: ColumnsType<Pick<ICreditsResponse, 'currency'>> = [
		{
			title: 'Currency',
			dataIndex: 'currency',
			key: 'currency',
		},
		{
			title: 'Action',
			dataIndex: 'action',
			key: 'action',
			render: () => (
				<div className="tw-flex tw-items-center tw-gap-1">
					<Button
						icon={
							<EditOutlined
								style={{
									fontSize: 16,
								}}
							/>
						}
						className="bg-theme-4 color-theme-7 !tw-border-none"
					/>
				</div>
			),
		},
	];
	/* ------------------------------- GET CREDIT ------------------------------- */
	const [currency, setCurrency] = useState<string>('');
	const { isLoading } = useQuery<ICreditsResponse>(['ICreditsResponse'], () => getCreditValue(), {
		onSuccess: (res) => {
			setCurrency(res.data.currency);
		},
		onError: (err) => {
			toast.error(err.data?.message);
		},
	});
	return (
		<DashboardRoute>
			<Head>
				<title>Credit</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<HeaderTable
				tableName={'Credit'}
				onAdd={() => {
					// setIsOpenAddUpdatePackageModal(true);
				}}
			/>
			<Table
				loading={isLoading}
				bordered
				dataSource={[
					{
						currency: currency,
					},
				]}
				columns={columnsTableCredit}
				pagination={{
					hideOnSinglePage: true,
				}}
			/>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
	return await withTranslationsProps(ctx);
}

export default Page;
