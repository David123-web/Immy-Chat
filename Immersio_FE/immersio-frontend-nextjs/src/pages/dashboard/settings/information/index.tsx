import DashboardRoute from '@/components/routes/DashboardRoute';
import { TAILWIND_CLASS } from '@/constants';
import { useMutation } from '@/hooks/useMutation';
import { IUpdateSubdomainInformation } from '@/src/interfaces/settings/settings.interfaces';
import { withTranslationsProps } from '@/src/next/with-app';
import { updateSubdomainInformation } from '@/src/services/settings/apiSettings';
import { useMobXStores } from '@/src/stores';
import { Button, Col, Form, Input, Row } from 'antd';
import { useForm } from 'antd/lib/form/Form';
import { observer } from 'mobx-react-lite';
import { useTranslation } from 'next-i18next';
import Head from 'next/head';
import { toast } from 'react-toastify';

const InformationPage = () => {
	const { t } = useTranslation()
	const [form] = useForm();
	const { globalStore } = useMobXStores();

	const updateSubdomainInformationMutation = useMutation<any, IUpdateSubdomainInformation>(updateSubdomainInformation, {
		onSuccess: (res) => {
			toast.success('Update subdomain information successfully');
		},
		onError: (err) => {
			toast.error('Update subdomain information failed');
		},
	});
	const onFinish = (data: IUpdateSubdomainInformation) => {
		updateSubdomainInformationMutation.mutate(data);
	};

	return (
		<DashboardRoute>
			<Head>
				<title>Information</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<div className="tw-text-3xl tw-font-semibold">
				{t('dashboard.label.information')}
			</div>
			<Form className="tw-w-2/3 tw-m-auto tw-mt-4" onFinish={onFinish} form={form} layout="vertical">
				<Form.Item
					name="title"
					label={t('dashboard.option.website_title')}
					rules={[
						{
							required: true,
							message: t('dashboard.notification.please_input_your_website_title'),
						},
					]}
				>
					<Input placeholder="Enter website title" />
				</Form.Item>
				<Row gutter={[24, 24]}>
					<Col span={12}>
						<Form.Item
							name="email"
							label={t('dashboard.option.email')}
							rules={[
								{
									required: true,
									message: t('dashboard.notification.email_validation_required'),
								},
							]}
						>
							<Input type="email" placeholder={t('dashboard.placeholder.enter_email')} />
						</Form.Item>
					</Col>
					<Col span={12}>
						{/* <Form.Item label="Phone number">
							<Space.Compact className="tw-w-full">
								<Form.Item initialValue={globalStore.listCountries[0].dialCode} className="!tw-mb-0" name="dialCode">
									<Select
										options={globalStore.listCountries.map((item) => {
											console.log(item);
											return {
												label: `${item.emoji} ${item.dialCode}`,
												value: item.dialCode,
											};
										})}
										className="!tw-w-24"
										showSearch
										filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())}
									/>
								</Form.Item>
							</Space.Compact>
						</Form.Item> */}
						<Form.Item
							label={t('dashboard.label.phone_number')}
							rules={[
								{
									pattern: /^[0-9]*$/,
									message: t('dashboard.notification.phone_number_is_not_valid'),
								},
								{
									max: 12,
									message: t('dashboard.notification.phone_number_is_not_valid'),
								},
							]}
							className="!tw-mb-0 tw-w-full"
							name="contactNumber"
						>
							<Input placeholder={t('dashboard.placeholder.enter_phone_number')} />
						</Form.Item>
					</Col>
				</Row>
				<Form.Item name="address" label={t('dashboard.label.address')}>
					<Input placeholder={t('dashboard.placeholder.enter_an_address')} />
				</Form.Item>
				<Button
					className={`${TAILWIND_CLASS.BUTTON_ANTD} !tw-px-6 !tw-rounded-md`}
					size="large"
					htmlType="submit"
					disabled={updateSubdomainInformationMutation.isLoading}
					loading={updateSubdomainInformationMutation.isLoading}
				>
					{t('dashboard.button.update')}
				</Button>
			</Form>
		</DashboardRoute>
	);
};

export async function getServerSideProps(ctx) {
  return await withTranslationsProps(ctx)
}

export default observer(InformationPage);
